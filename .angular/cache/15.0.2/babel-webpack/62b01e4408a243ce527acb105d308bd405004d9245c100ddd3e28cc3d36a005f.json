{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst API_URL = environment.apiUrl;\nexport class ShroomShareApiService {\n  constructor(http) {\n    this.http = http;\n  }\n  setQueryParams(filters) {\n    let url = '';\n    let separator = '';\n    if (filters === null) return url;\n    const objectSize = Object.keys(filters).length;\n    Object.entries(filters).forEach(([key, value], i) => {\n      if (i === 0) url += '?';\n      separator = i < objectSize - 1 ? '&' : '';\n      url += `${key}=${value}${separator}`;\n    });\n    return url;\n  }\n  getSpecies$(filter) {\n    const queryParams = this.setQueryParams(filter || null);\n    const url = `${API_URL}/species${queryParams}`;\n    return this.http.get(url);\n  }\n  countSpecies$() {\n    const url = `${API_URL}/species?count=true`;\n    return this.http.get(url);\n  }\n  getSpecy$(specyId) {\n    const url = `${API_URL}/species:${specyId}`;\n    return this.http.get(url).pipe(map(res => res.specy));\n  }\n  getMushrooms$(filter) {\n    const queryParams = this.setQueryParams(filter || null);\n    const url = `${API_URL}/mushrooms${queryParams}`;\n    return this.http.get(url);\n  }\n  addMushroom$(body) {\n    const url = `${API_URL}/mushrooms`;\n    return this.http.post(url, body).pipe(map(res => res.mushrooms));\n  }\n  deleteMushroom$(mushroomId) {\n    const url = `${API_URL}/mushrooms:${mushroomId}`;\n    return this.http.delete(url).pipe(map(res => res.message));\n  }\n  modifyMushroom$(mushroomId, body) {\n    const url = `${API_URL}/mushrooms:${mushroomId}`;\n    return this.http.patch(url, body).pipe(map(res => res.mushroom));\n  }\n  getUsers$(filter) {\n    const queryParams = this.setQueryParams(filter || null);\n    const url = `${API_URL}/users${queryParams}`;\n    return this.http.get(url);\n  }\n  getUser$(userId) {\n    const url = `${API_URL}/users:${userId}`;\n    return this.http.get(url).pipe(map(res => res.user));\n  }\n  addUser$(body) {\n    const url = `${API_URL}/users`;\n    return this.http.post(url, body).pipe(map(res => res.user));\n  }\n  modifyUser$(body) {\n    const url = `${API_URL}/users`;\n    return this.http.patch(url, body).pipe(map(res => res.user));\n  }\n  deleteUser$(userId) {\n    const url = `${API_URL}/users:${userId}`;\n    return this.http.delete(url).pipe(map(res => res.message));\n  }\n}\nShroomShareApiService.ɵfac = function ShroomShareApiService_Factory(t) {\n  return new (t || ShroomShareApiService)(i0.ɵɵinject(i1.HttpClient));\n};\nShroomShareApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ShroomShareApiService,\n  factory: ShroomShareApiService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["map","environment","API_URL","apiUrl","ShroomShareApiService","constructor","http","setQueryParams","filters","url","separator","objectSize","Object","keys","length","entries","forEach","key","value","i","getSpecies$","filter","queryParams","get","countSpecies$","getSpecy$","specyId","pipe","res","specy","getMushrooms$","addMushroom$","body","post","mushrooms","deleteMushroom$","mushroomId","delete","message","modifyMushroom$","patch","mushroom","getUsers$","getUser$","userId","user","addUser$","modifyUser$","deleteUser$","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\timot\\OneDrive\\Documents\\HEIG\\semestre-5\\DevMobile\\projet-shroom-share\\ShroomShare-front\\src\\app\\utils\\shroom-share-api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\r\nimport { map } from 'rxjs/operators';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Specy, SpecyResponse, SpeciesResponse, SpeciesFilter } from '../models/species';\r\nimport { environment } from 'src/environments/environment';\r\nimport {\r\n  Mushroom,\r\n  MushroomsResponse,\r\n  MushroomResponse,\r\n  PaginatedMushroomsResponse,\r\n  MushroomsFilter,\r\n  AddMushroomRequest,\r\n  ModifyMushroomRequest,\r\n} from '../models/mushrooms';\r\nimport { Response, CountResponse } from '../models/response';\r\nimport {\r\n  AddUserRequest,\r\n  ModifyUserRequest,\r\n  User,\r\n  UserFilter,\r\n  UserResponse,\r\n  UsersResponse,\r\n  PaginatedUsersResponse,\r\n} from '../models/users';\r\nimport { PaginatedSpeciesResponse } from '../models/species';\r\n\r\nconst API_URL = environment.apiUrl;\r\n\r\ntype StdObject<T> = {\r\n  [index: string]: T;\r\n};\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n}) // eslint-disable-line\r\nexport class ShroomShareApiService {\r\n  constructor(private http: HttpClient) {}\r\n\r\n  private setQueryParams<T>(filters: StdObject<T> | null): String {\r\n    let url = '';\r\n    let separator = '';\r\n    if (filters === null) return url;\r\n    const objectSize = Object.keys(filters).length;\r\n    Object.entries(filters).forEach(([key, value], i) => {\r\n      if (i === 0) url += '?';\r\n      separator = i < objectSize - 1 ? '&' : '';\r\n      url += `${key}=${value}${separator}`;\r\n    });\r\n    return url;\r\n  }\r\n\r\n  getSpecies$(filter?: SpeciesFilter): Observable<PaginatedSpeciesResponse> {\r\n    const queryParams = this.setQueryParams(filter || null);\r\n    const url = `${API_URL}/species${queryParams}`;\r\n    return this.http.get<PaginatedSpeciesResponse>(url);\r\n  }\r\n\r\n  countSpecies$(): Observable<CountResponse> {\r\n    const url = `${API_URL}/species?count=true`;\r\n    return this.http.get<CountResponse>(url);\r\n  }\r\n\r\n  getSpecy$(specyId: String): Observable<Specy> {\r\n    const url = `${API_URL}/species:${specyId}`;\r\n    return this.http.get<SpecyResponse>(url).pipe(map((res) => res.specy));\r\n  }\r\n\r\n  getMushrooms$(filter?: MushroomsFilter): Observable<PaginatedMushroomsResponse> {\r\n    const queryParams = this.setQueryParams(filter || null);\r\n    const url = `${API_URL}/mushrooms${queryParams}`;\r\n    return this.http.get<PaginatedMushroomsResponse>(url);\r\n  }\r\n\r\n  addMushroom$(body: AddMushroomRequest): Observable<Mushroom[]> {\r\n    const url = `${API_URL}/mushrooms`;\r\n    return this.http.post<MushroomsResponse>(url, body).pipe(map((res) => res.mushrooms));\r\n  }\r\n\r\n  deleteMushroom$(mushroomId: String): Observable<String> {\r\n    const url = `${API_URL}/mushrooms:${mushroomId}`;\r\n    return this.http.delete<Response>(url).pipe(map((res) => res.message));\r\n  }\r\n\r\n  modifyMushroom$(mushroomId: String, body: ModifyMushroomRequest): Observable<Mushroom> {\r\n    const url = `${API_URL}/mushrooms:${mushroomId}`;\r\n    return this.http.patch<MushroomResponse>(url, body).pipe(map((res) => res.mushroom));\r\n  }\r\n\r\n  getUsers$(filter?: UserFilter): Observable<PaginatedUsersResponse> {\r\n    const queryParams = this.setQueryParams(filter || null);\r\n    const url = `${API_URL}/users${queryParams}`;\r\n    return this.http.get<PaginatedUsersResponse>(url);\r\n  }\r\n\r\n  getUser$(userId: String): Observable<User> {\r\n    const url = `${API_URL}/users:${userId}`;\r\n    return this.http.get<UserResponse>(url).pipe(map((res) => res.user));\r\n  }\r\n\r\n  addUser$(body: AddUserRequest): Observable<User> {\r\n    const url = `${API_URL}/users`;\r\n    return this.http.post<UserResponse>(url, body).pipe(map((res) => res.user));\r\n  }\r\n\r\n  modifyUser$(body: ModifyUserRequest): Observable<User> {\r\n    const url = `${API_URL}/users`;\r\n    return this.http.patch<UserResponse>(url, body).pipe(map((res) => res.user));\r\n  }\r\n\r\n  deleteUser$(userId: String): Observable<String> {\r\n    const url = `${API_URL}/users:${userId}`;\r\n    return this.http.delete<UserResponse>(url).pipe(map((res) => res.message));\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}