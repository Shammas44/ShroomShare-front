{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../auth.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"@ionic/angular\";\nfunction LoginPage_ion_item_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-item\", 11)(1, \"ion-text\", 12);\n    i0.ɵɵtext(2, \"Username is required.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction LoginPage_ion_item_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-item\", 11)(1, \"ion-text\", 12);\n    i0.ɵɵtext(2, \"Password is required.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction LoginPage_ion_text_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-text\", 12);\n    i0.ɵɵtext(1, \"Username or password is invalid.\");\n    i0.ɵɵelementEnd();\n  }\n}\n/**\r\n * Login page.\r\n */\nexport class LoginPage {\n  constructor(auth, router) {\n    this.auth = auth;\n    this.router = router;\n    /**\r\n     * If true, it means that the authentication API has return a failed response\r\n     * (probably because the name or password is incorrect).\r\n     */\n    this.loginError = undefined;\n    this.authRequest = {\n      username: '',\n      password: ''\n    };\n  }\n  /**\r\n   * Called when the login form is submitted.\r\n   */\n  onSubmit(form) {\n    // Do not do anything if the form is invalid.\n    if (form.invalid) {\n      return;\n    }\n    // Hide any previous login error.\n    this.loginError = false;\n    // Perform the authentication request to the API.\n    console.log(\"auth request\", this.authRequest);\n    this.auth.logIn$(this.authRequest).subscribe({\n      next: () => this.router.navigateByUrl('/'),\n      error: err => {\n        this.loginError = true;\n        console.warn(`Authentication failed: ${err.message}`);\n      }\n    });\n  }\n}\nLoginPage.ɵfac = function LoginPage_Factory(t) {\n  return new (t || LoginPage)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.Router));\n};\nLoginPage.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginPage,\n  selectors: [[\"ng-component\"]],\n  decls: 24,\n  vars: 6,\n  consts: [[3, \"submit\"], [\"loginForm\", \"ngForm\"], [\"position\", \"floating\"], [\"inputmode\", \"text\", \"required\", \"true\", \"name\", \"username\", 3, \"ngModel\", \"ngModelChange\"], [\"username\", \"ngModel\"], [\"lines\", \"none\", 4, \"ngIf\"], [\"inputmode\", \"text\", \"required\", \"true\", \"type\", \"password\", \"name\", \"password\", 3, \"ngModel\", \"ngModelChange\"], [\"password\", \"ngModel\"], [1, \"ion-padding\"], [\"type\", \"submit\", \"expand\", \"block\", 3, \"disabled\"], [\"color\", \"danger\", 4, \"ngIf\"], [\"lines\", \"none\"], [\"color\", \"danger\"]],\n  template: function LoginPage_Template(rf, ctx) {\n    if (rf & 1) {\n      const _r6 = i0.ɵɵgetCurrentView();\n      i0.ɵɵelementStart(0, \"ion-header\")(1, \"ion-toolbar\")(2, \"ion-title\");\n      i0.ɵɵtext(3, \"Login\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(4, \"ion-content\")(5, \"form\", 0, 1);\n      i0.ɵɵlistener(\"submit\", function LoginPage_Template_form_submit_5_listener() {\n        i0.ɵɵrestoreView(_r6);\n        const _r0 = i0.ɵɵreference(6);\n        return i0.ɵɵresetView(ctx.onSubmit(_r0));\n      });\n      i0.ɵɵelementStart(7, \"ion-list\")(8, \"ion-item\")(9, \"ion-label\", 2);\n      i0.ɵɵtext(10, \"Username\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"ion-input\", 3, 4);\n      i0.ɵɵlistener(\"ngModelChange\", function LoginPage_Template_ion_input_ngModelChange_11_listener($event) {\n        return ctx.authRequest.username = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(13, LoginPage_ion_item_13_Template, 3, 0, \"ion-item\", 5);\n      i0.ɵɵelementStart(14, \"ion-item\")(15, \"ion-label\", 2);\n      i0.ɵɵtext(16, \"Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(17, \"ion-input\", 6, 7);\n      i0.ɵɵlistener(\"ngModelChange\", function LoginPage_Template_ion_input_ngModelChange_17_listener($event) {\n        return ctx.authRequest.password = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(19, LoginPage_ion_item_19_Template, 3, 0, \"ion-item\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(20, \"div\", 8)(21, \"ion-button\", 9);\n      i0.ɵɵtext(22, \"Log in\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(23, LoginPage_ion_text_23_Template, 2, 0, \"ion-text\", 10);\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(6);\n      const _r1 = i0.ɵɵreference(12);\n      const _r3 = i0.ɵɵreference(18);\n      i0.ɵɵadvance(11);\n      i0.ɵɵproperty(\"ngModel\", ctx.authRequest.username);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", _r1.invalid && _r1.touched);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.authRequest.password);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", _r3.invalid && _r3.touched);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"disabled\", _r0.invalid);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.loginError);\n    }\n  },\n  dependencies: [i3.NgIf, i4.ɵNgNoValidate, i4.NgControlStatus, i4.NgControlStatusGroup, i4.RequiredValidator, i4.NgModel, i4.NgForm, i5.IonButton, i5.IonContent, i5.IonHeader, i5.IonInput, i5.IonItem, i5.IonLabel, i5.IonList, i5.IonText, i5.IonTitle, i5.IonToolbar, i5.TextValueAccessor],\n  encapsulation: 2\n});","map":{"version":3,"mappings":";;;;;;;;IAsBIA,oCAAoE;IACzCA,qCAAqB;IAAAA,iBAAW;;;;;IAiB3DA,oCAAoE;IACzCA,qCAAqB;IAAAA,iBAAW;;;;;IAW3DA,oCACG;IAAAA,gDAAgC;IAAAA,iBAClC;;;AC/CL;;;AAMA,OAAM,MAAOC,SAAS;EAapBC,YAAoBC,IAAiB,EAAUC,MAAc;IAAzC,SAAI,GAAJD,IAAI;IAAuB,WAAM,GAANC,MAAM;IANrD;;;;IAIA,eAAU,GAAwBC,SAAS;IAGzC,IAAI,CAACC,WAAW,GAAG;MACjBC,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE;KACX;EACH;EAEA;;;EAGAC,QAAQ,CAACC,IAAY;IACnB;IACA,IAAIA,IAAI,CAACC,OAAO,EAAE;MAChB;;IAGF;IACA,IAAI,CAACC,UAAU,GAAG,KAAK;IAEvB;IACAC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAE,IAAI,CAACR,WAAW,CAAC;IAC7C,IAAI,CAACH,IAAI,CAACY,MAAM,CAAC,IAAI,CAACT,WAAW,CAAC,CAACU,SAAS,CAAC;MAC3CC,IAAI,EAAE,MAAM,IAAI,CAACb,MAAM,CAACc,aAAa,CAAC,GAAG,CAAC;MAC1CC,KAAK,EAAGC,GAAG,IAAI;QACb,IAAI,CAACR,UAAU,GAAG,IAAI;QACtBC,OAAO,CAACQ,IAAI,CAAC,0BAA0BD,GAAG,CAACE,OAAO,EAAE,CAAC;MACvD;KACD,CAAC;EACJ;;;mBAzCWrB,SAAS;AAAA;;QAATA,SAAS;EAAAsB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;;MDbtB3B,kCAAY;MAEGA,qBAAK;MAAAA,iBAAY;MAIhCA,mCAAa;MACaA;QAAAA;QAAA;QAAA,OAAUA,gCAAmB;MAAA,EAAC;MACtDA,gCAAU;MAGyBA,yBAAQ;MAAAA,iBAAY;MACnDA,wCAMC;MADCA;QAAA;MAAA,EAAkC;MACnCA,iBAAY;MAIfA,sEAEW;MAGXA,iCAAU;MACuBA,yBAAQ;MAAAA,iBAAY;MACnDA,wCAOC;MADCA;QAAA;MAAA,EAAkC;MACnCA,iBAAY;MAIfA,sEAEW;MACbA,iBAAW;MAEXA,+BAAyB;MAGpBA,uBAAM;MAAAA,iBACR;MAGDA,uEAEC;MACHA,iBAAM;;;;;;MAtCAA,gBAAkC;MAAlCA,kDAAkC;MAKdA,eAA0C;MAA1CA,iDAA0C;MAa9DA,eAAkC;MAAlCA,kDAAkC;MAKdA,eAA0C;MAA1CA,iDAA0C;MAOzBA,eAA8B;MAA9BA,sCAA8B;MAK7CA,eAAgB;MAAhBA,qCAAgB","names":["i0","LoginPage","constructor","auth","router","undefined","authRequest","username","password","onSubmit","form","invalid","loginError","console","log","logIn$","subscribe","next","navigateByUrl","error","err","warn","message","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\timot\\OneDrive\\Documents\\HEIG\\semestre-5\\DevMobile\\projet-shroom-share\\ShroomShare-front\\src\\app\\auth\\login\\login.page.html","C:\\Users\\timot\\OneDrive\\Documents\\HEIG\\semestre-5\\DevMobile\\projet-shroom-share\\ShroomShare-front\\src\\app\\auth\\login\\login.page.ts"],"sourcesContent":["<ion-header>\r\n  <ion-toolbar>\r\n    <ion-title>Login</ion-title>\r\n  </ion-toolbar>\r\n</ion-header>\r\n\r\n<ion-content>\r\n<form #loginForm=\"ngForm\" (submit)=\"onSubmit(loginForm)\">\r\n  <ion-list>\r\n    <!-- Username input -->\r\n    <ion-item>\r\n      <ion-label position=\"floating\">Username</ion-label>\r\n      <ion-input\r\n        inputmode=\"text\"\r\n        #username=\"ngModel\"\r\n        required=\"true\"\r\n        name=\"username\"\r\n        [(ngModel)]=\"authRequest.username\"\r\n      ></ion-input>\r\n    </ion-item>\r\n\r\n    <!-- Error message displayed if the username is invalid -->\r\n    <ion-item lines=\"none\" *ngIf=\"username.invalid && username.touched\">\r\n      <ion-text color=\"danger\">Username is required.</ion-text>\r\n    </ion-item>\r\n\r\n    <!-- Password input -->\r\n    <ion-item>\r\n      <ion-label position=\"floating\">Password</ion-label>\r\n      <ion-input\r\n        inputmode=\"text\"\r\n        #password=\"ngModel\"\r\n        required=\"true\"\r\n        type=\"password\"\r\n        name=\"password\"\r\n        [(ngModel)]=\"authRequest.password\"\r\n      ></ion-input>\r\n    </ion-item>\r\n\r\n    <!-- Error message displayed if the password is invalid -->\r\n    <ion-item lines=\"none\" *ngIf=\"password.invalid && password.touched\">\r\n      <ion-text color=\"danger\">Password is required.</ion-text>\r\n    </ion-item>\r\n  </ion-list>\r\n\r\n  <div class=\"ion-padding\">\r\n    <!-- Submit button -->\r\n    <ion-button type=\"submit\" expand=\"block\" [disabled]=\"loginForm.invalid\"\r\n      >Log in</ion-button\r\n    >\r\n\r\n    <!-- Error message displayed if the login failed -->\r\n    <ion-text color=\"danger\" *ngIf=\"loginError\"\r\n      >Username or password is invalid.</ion-text\r\n    >\r\n  </div>\r\n</form>\r\n</ion-content>\r\n","import { Component } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { AuthService } from '../auth.service';\r\nimport { AuthRequest } from '../../models/auth';\r\n\r\n/**\r\n * Login page.\r\n */\r\n@Component({\r\n  templateUrl: 'login.page.html',\r\n}) // eslint-disable-line\r\nexport class LoginPage {\r\n  /**\r\n   * This authentication request object will be updated when the user\r\n   * edits the login form. It will then be sent to the API.\r\n   */\r\n  authRequest: AuthRequest;\r\n\r\n  /**\r\n   * If true, it means that the authentication API has return a failed response\r\n   * (probably because the name or password is incorrect).\r\n   */\r\n  loginError: boolean | undefined = undefined;\r\n\r\n  constructor(private auth: AuthService, private router: Router) {\r\n    this.authRequest = {\r\n      username: '',\r\n      password: '',\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Called when the login form is submitted.\r\n   */\r\n  onSubmit(form: NgForm) {\r\n    // Do not do anything if the form is invalid.\r\n    if (form.invalid) {\r\n      return;\r\n    }\r\n\r\n    // Hide any previous login error.\r\n    this.loginError = false;\r\n\r\n    // Perform the authentication request to the API.\r\n    console.log(\"auth request\", this.authRequest)\r\n    this.auth.logIn$(this.authRequest).subscribe({\r\n      next: () => this.router.navigateByUrl('/'),\r\n      error: (err) => {\r\n        this.loginError = true;\r\n        console.warn(`Authentication failed: ${err.message}`);\r\n      },\r\n    });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}