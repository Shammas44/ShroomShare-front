{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(auth, router) {\n    this.auth = auth;\n    this.router = router;\n  }\n  canActivate() {\n    return this.auth.isAuthenticated$().pipe(map(isAuthenticated => isAuthenticated ? true : this.router.parseUrl('/login')));\n  }\n}\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n};\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAIA,SAASA,GAAG,QAAQ,gBAAgB;;;;AAKpC,OAAM,MAAOC,SAAS;EACpBC,YAAoBC,IAAiB,EAAUC,MAAc;IAAzC,SAAI,GAAJD,IAAI;IAAuB,WAAM,GAANC,MAAM;EAAW;EAEhEC,WAAW;IACT,OAAO,IAAI,CAACF,IAAI,CACbG,gBAAgB,EAAE,CAClBC,IAAI,CAACP,GAAG,CAAEQ,eAAe,IAAMA,eAAe,GAAG,IAAI,GAAG,IAAI,CAACJ,MAAM,CAACK,QAAQ,CAAC,QAAQ,CAAE,CAAC,CAAC;EAC9F;;;mBAPWR,SAAS;AAAA;;SAATA,SAAS;EAAAS,SAATT,SAAS;EAAAU,YAFR;AAAM","names":["map","AuthGuard","constructor","auth","router","canActivate","isAuthenticated$","pipe","isAuthenticated","parseUrl","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\timot\\OneDrive\\Documents\\HEIG\\semestre-5\\DevMobile\\projet-shroom-share\\ShroomShare-front\\src\\app\\auth\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { CanActivate, Router, UrlTree } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from './auth.service';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})//eslint-disable-line\r\nexport class AuthGuard implements CanActivate {\r\n  constructor(private auth: AuthService, private router: Router) {}\r\n\r\n  canActivate(): Observable<boolean | UrlTree> {\r\n    return this.auth\r\n      .isAuthenticated$()\r\n      .pipe(map((isAuthenticated) => (isAuthenticated ? true : this.router.parseUrl('/login'))));\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}