{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { UsersMap } from '../../models/users';\nimport { findIndexByProperty, findByProperty } from '../../utils/utility-functions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../utils/shroom-share-api.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@ionic/angular\";\nfunction PickerComponent_ion_chip_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ion-chip\")(1, \"ion-label\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"ion-icon\", 7);\n    i0.ɵɵlistener(\"click\", function PickerComponent_ion_chip_1_Template_ion_icon_click_3_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const user_r3 = restoredCtx.$implicit;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.onChipClick(user_r3.key));\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const user_r3 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(user_r3.key);\n  }\n}\nfunction PickerComponent_ion_item_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ion-item\")(1, \"ion-checkbox\", 8);\n    i0.ɵɵlistener(\"ionChange\", function PickerComponent_ion_item_9_Template_ion_checkbox_ionChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.onCheck($event));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(2, \"ion-label\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const user_r6 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"value\", user_r6.username);\n    i0.ɵɵproperty(\"checked\", user_r6.checked);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(user_r6.username);\n  }\n}\nfunction PickerComponent_ion_item_16_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ion-item\")(1, \"ion-checkbox\", 8);\n    i0.ɵɵlistener(\"ionChange\", function PickerComponent_ion_item_16_Template_ion_checkbox_ionChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.onCheck($event));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(2, \"ion-label\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const user_r9 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"value\", user_r9.username);\n    i0.ɵɵproperty(\"checked\", user_r9.checked);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(user_r9.username);\n  }\n}\nconst dummyData = [{\n  username: 'John',\n  id: '...',\n  admin: false\n}, {\n  username: 'Johnny',\n  id: '...',\n  admin: false\n}, {\n  username: 'Eloise',\n  id: '...',\n  admin: false\n}];\nexport class PickerComponent {\n  constructor(api) {\n    this.api = api;\n    this.pageSize = 5;\n    this.choosenUser = new EventEmitter();\n    this.users = [];\n    this.search = '';\n    this.chips = new UsersMap();\n    this.favorites = [];\n    this.allFavorites = [];\n    this.currentPage = 1;\n    this.lastPage = 1;\n    this.setFavorites();\n  }\n  emitValues() {\n    const values = Array.from(this.chips.values());\n    this.choosenUser.emit(values);\n  }\n  onIonInfinite(event) {\n    this.addUsers();\n    setTimeout(() => {\n      event.target.complete();\n    }, 500);\n  }\n  addUsers() {\n    if (this.currentPage >= this.lastPage) return;\n    this.currentPage++;\n    const option = {\n      search: this.search,\n      pageSize: this.pageSize,\n      currentPage: this.currentPage\n    };\n    this.api.getUsers$(option).subscribe({\n      next: res => {\n        for (const user of res.users) {\n          user.checked = false;\n          const favoriteUser = findByProperty(this.favorites, 'username', user);\n          if (!favoriteUser) this.users.push(user);\n        }\n      },\n      error: err => {\n        console.log({\n          err\n        });\n      }\n    });\n  }\n  setUsers() {\n    const option = {\n      search: this.search,\n      pageSize: this.pageSize\n    };\n    this.api.getUsers$(option).subscribe({\n      next: res => {\n        for (const user of res.users) {\n          const chip = this.chips.get(user.username);\n          user.checked = chip ? true : false;\n          const favoriteUser = findByProperty(this.favorites, 'username', user);\n          if (!favoriteUser) this.users.push(user);\n        }\n        this.lastPage = res.lastPage;\n      },\n      error: err => {\n        console.log({\n          err\n        });\n      }\n    });\n  }\n  resetUsers() {\n    this.users = [];\n    this.currentPage = 1;\n  }\n  setFavorites() {\n    this.allFavorites = dummyData;\n    this.favorites = dummyData;\n  }\n  onInputChange(e) {\n    const event = e;\n    const search = event.detail.value;\n    const lowerCaseSearch = search.toLowerCase();\n    this.search = lowerCaseSearch;\n    this.resetFavorites();\n    if (search === '') return this.resetUsers();\n    this.setUsers();\n    this.users = this.users.filter(user => {\n      const lowerCaseUsername = user.username.toLowerCase();\n      if (lowerCaseUsername.startsWith(lowerCaseSearch)) return user;\n      return;\n    });\n    this.favorites = this.favorites.filter(user => {\n      const lowerCaseUsername = user.username.toLowerCase();\n      if (lowerCaseUsername.startsWith(lowerCaseSearch)) return user;\n      return;\n    });\n  }\n  resetFavorites() {\n    const favorites = [...this.allFavorites];\n    favorites.forEach(user => {\n      const index = findIndexByProperty(this.favorites, 'username', user);\n      if (index !== -1) favorites[index] = user;\n    });\n    this.favorites = favorites;\n  }\n  onCheck(e) {\n    const event = e;\n    const username = event.detail.value;\n    const isChecked = event.detail.checked;\n    const userIndex = findIndexByProperty(this.users, 'username', username);\n    const favoriteIndex = findIndexByProperty(this.favorites, 'username', username);\n    if (userIndex !== -1) this.users[userIndex].checked = isChecked;\n    if (favoriteIndex !== -1) this.favorites[favoriteIndex].checked = isChecked;\n    if (isChecked) this.chips.set(username, username);\n    if (!isChecked) {\n      this.chips.delete(username);\n    }\n    this.emitValues();\n  }\n  onChipClick(username) {\n    this.chips.delete(username);\n    const userIndex = findIndexByProperty(this.users, 'username', username);\n    const favoriteIndex = findIndexByProperty(this.favorites, 'username', username);\n    if (userIndex !== -1) this.users[userIndex].checked = false;\n    if (favoriteIndex !== -1) this.favorites[favoriteIndex].checked = false;\n    this.emitValues();\n  }\n  ngOnInit() {}\n}\nPickerComponent.ɵfac = function PickerComponent_Factory(t) {\n  return new (t || PickerComponent)(i0.ɵɵdirectiveInject(i1.ShroomShareApiService));\n};\nPickerComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: PickerComponent,\n  selectors: [[\"app-picker\"]],\n  inputs: {\n    pageSize: \"pageSize\"\n  },\n  outputs: {\n    choosenUser: \"choosenUser\"\n  },\n  decls: 19,\n  vars: 5,\n  consts: [[3, \"ionChange\"], [4, \"ngFor\", \"ngForOf\"], [\"value\", \"first\"], [\"slot\", \"header\", \"color\", \"light\"], [\"slot\", \"content\", 1, \"ion-padding\", \"favorites__list\"], [\"slot\", \"content\", 1, \"ion-padding\", \"users__content\", \"ion-content-scroll-host\"], [3, \"ionInfinite\"], [\"name\", \"close\", 3, \"click\"], [\"slot\", \"start\", 3, \"value\", \"checked\", \"ionChange\"]],\n  template: function PickerComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ion-searchbar\", 0);\n      i0.ɵɵlistener(\"ionChange\", function PickerComponent_Template_ion_searchbar_ionChange_0_listener($event) {\n        return ctx.onInputChange($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(1, PickerComponent_ion_chip_1_Template, 4, 1, \"ion-chip\", 1);\n      i0.ɵɵpipe(2, \"keyvalue\");\n      i0.ɵɵelementStart(3, \"ion-accordion-group\")(4, \"ion-accordion\", 2)(5, \"ion-item\", 3)(6, \"ion-label\");\n      i0.ɵɵtext(7, \"Mes favoris\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(8, \"ion-list\", 4);\n      i0.ɵɵtemplate(9, PickerComponent_ion_item_9_Template, 4, 3, \"ion-item\", 1);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(10, \"ion-accordion\")(11, \"ion-item\", 3)(12, \"ion-label\");\n      i0.ɵɵtext(13, \"Tous les utilisateurs\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(14, \"div\", 5)(15, \"ion-list\");\n      i0.ɵɵtemplate(16, PickerComponent_ion_item_16_Template, 4, 3, \"ion-item\", 1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(17, \"ion-infinite-scroll\", 6);\n      i0.ɵɵlistener(\"ionInfinite\", function PickerComponent_Template_ion_infinite_scroll_ionInfinite_17_listener($event) {\n        return ctx.onIonInfinite($event);\n      });\n      i0.ɵɵelement(18, \"ion-infinite-scroll-content\");\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(2, 3, ctx.chips));\n      i0.ɵɵadvance(8);\n      i0.ɵɵproperty(\"ngForOf\", ctx.favorites);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngForOf\", ctx.users);\n    }\n  },\n  dependencies: [i2.NgForOf, i3.IonAccordion, i3.IonAccordionGroup, i3.IonCheckbox, i3.IonChip, i3.IonIcon, i3.IonInfiniteScroll, i3.IonInfiniteScrollContent, i3.IonItem, i3.IonLabel, i3.IonList, i3.IonSearchbar, i3.BooleanValueAccessor, i3.TextValueAccessor, i2.KeyValuePipe],\n  styles: [\".favorites__list[_ngcontent-%COMP%] {\\n  overflow: scroll;\\n  height: 100%;\\n  max-height: 20vh;\\n}\\n\\n.users__content[_ngcontent-%COMP%] {\\n  overflow: scroll;\\n  height: 100%;\\n  max-height: 20vh;\\n}\\n/*# sourceURL=webpack://./src/app/filters/picker/picker.component.scss */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvZmlsdGVycy9waWNrZXIvcGlja2VyLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWVDO0VBQ0MsZ0JBQUE7RUFDQSxZQUFBO0VBQ0EsZ0JBQUE7QUFkRjs7QUFpQkE7RUFDRSxnQkFBQTtFQUNBLFlBQUE7RUFDQSxnQkFBQTtBQWRGIiwic291cmNlc0NvbnRlbnQiOlsiLmZhdm9yaXRlc19fbGlzdCB7XG4gIG92ZXJmbG93OiBzY3JvbGw7XG4gIGhlaWdodDogMTAwJTtcbiAgbWF4LWhlaWdodDogMjB2aDtcbn1cblxuLnVzZXJzX19jb250ZW50IHtcbiAgb3ZlcmZsb3c6IHNjcm9sbDtcbiAgaGVpZ2h0OiAxMDAlO1xuICBtYXgtaGVpZ2h0OiAyMHZoO1xufSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"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","names":["EventEmitter","UsersMap","findIndexByProperty","findByProperty","i0","dummyData","username","id","admin","PickerComponent","constructor","api","setFavorites","emitValues","values","Array","from","chips","choosenUser","emit","onIonInfinite","event","addUsers","setTimeout","target","complete","currentPage","lastPage","option","search","pageSize","getUsers$","subscribe","next","res","user","users","checked","favoriteUser","favorites","push","error","err","console","log","setUsers","chip","get","resetUsers","allFavorites","onInputChange","e","detail","value","lowerCaseSearch","toLowerCase","resetFavorites","filter","lowerCaseUsername","startsWith","forEach","index","onCheck","isChecked","userIndex","favoriteIndex","set","delete","onChipClick","ngOnInit","selectors","inputs","outputs","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\timot\\OneDrive\\Documents\\HEIG\\semestre-5\\DevMobile\\projet-shroom-share\\ShroomShare-front\\src\\app\\filters\\picker\\picker.component.ts","C:\\Users\\timot\\OneDrive\\Documents\\HEIG\\semestre-5\\DevMobile\\projet-shroom-share\\ShroomShare-front\\src\\app\\filters\\picker\\picker.component.html"],"sourcesContent":["import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\r\nimport { ShroomShareApiService } from '../../utils/shroom-share-api.service';\r\nimport { UsersMap, ChoosenUser } from '../../models/users';\r\nimport { InfiniteScrollCustomEvent } from '@ionic/angular';\r\nimport { findIndexByProperty, findByProperty } from '../../utils/utility-functions';\r\n\r\nconst dummyData = [\r\n  { username: 'John', id: '...', admin: false },\r\n  { username: 'Johnny', id: '...', admin: false },\r\n  { username: 'Eloise', id: '...', admin: false },\r\n];\r\n\r\n@Component({\r\n  selector: 'app-picker',\r\n  templateUrl: './picker.component.html',\r\n  styleUrls: ['./picker.component.scss'],\r\n}) //eslint-disable-line\r\nexport class PickerComponent implements OnInit {\r\n  @Input() pageSize = 5;\r\n  @Output() choosenUser = new EventEmitter<ChoosenUser[]>();\r\n\r\n  users: ChoosenUser[] = [];\r\n  search: string = '';\r\n  chips: UsersMap = new UsersMap();\r\n  favorites: ChoosenUser[] = [];\r\n  allFavorites: ChoosenUser[] = [];\r\n  currentPage: number = 1;\r\n  lastPage: number = 1;\r\n\r\n  constructor(private api: ShroomShareApiService) {\r\n    this.setFavorites();\r\n  }\r\n\r\n  emitValues() {\r\n    const values = Array.from(this.chips.values());\r\n    this.choosenUser.emit(values);\r\n  }\r\n\r\n  onIonInfinite(event: Event) {\r\n    this.addUsers();\r\n    setTimeout(() => {\r\n      (event as InfiniteScrollCustomEvent).target.complete();\r\n    }, 500);\r\n  }\r\n\r\n  private addUsers() {\r\n    if (this.currentPage >= this.lastPage) return;\r\n    this.currentPage++;\r\n    const option = {\r\n      search: this.search,\r\n      pageSize: this.pageSize,\r\n      currentPage: this.currentPage,\r\n    };\r\n    this.api.getUsers$(option).subscribe({\r\n      next: (res) => {\r\n        for (const user of res.users as ChoosenUser[]) {\r\n          user.checked = false;\r\n          const favoriteUser = findByProperty(this.favorites, 'username', user);\r\n          if (!favoriteUser) this.users.push(user);\r\n        }\r\n      },\r\n      error: (err) => {\r\n        console.log({ err });\r\n      },\r\n    });\r\n  }\r\n\r\n  private setUsers() {\r\n    const option = { search: this.search, pageSize: this.pageSize };\r\n    this.api.getUsers$(option).subscribe({\r\n      next: (res) => {\r\n        for (const user of res.users as ChoosenUser[]) {\r\n          const chip = this.chips.get(user.username);\r\n          user.checked = chip ? true : false;\r\n          const favoriteUser = findByProperty(this.favorites, 'username', user);\r\n          if (!favoriteUser) this.users.push(user);\r\n        }\r\n        this.lastPage = res.lastPage;\r\n      },\r\n      error: (err) => {\r\n        console.log({ err });\r\n      },\r\n    });\r\n  }\r\n\r\n  private resetUsers() {\r\n    this.users = [];\r\n    this.currentPage = 1;\r\n  }\r\n\r\n  private setFavorites() {\r\n    this.allFavorites = dummyData;\r\n    this.favorites = dummyData;\r\n  }\r\n\r\n  onInputChange(e: Event) {\r\n    const event = e as CustomEvent;\r\n    const search: string = event.detail.value;\r\n    const lowerCaseSearch = search.toLowerCase();\r\n    this.search = lowerCaseSearch;\r\n    this.resetFavorites();\r\n    if (search === '') return this.resetUsers();\r\n    this.setUsers();\r\n    this.users = this.users.filter((user) => {\r\n      const lowerCaseUsername = user.username.toLowerCase();\r\n      if (lowerCaseUsername.startsWith(lowerCaseSearch)) return user;\r\n      return;\r\n    });\r\n    this.favorites = this.favorites.filter((user) => {\r\n      const lowerCaseUsername = user.username.toLowerCase();\r\n      if (lowerCaseUsername.startsWith(lowerCaseSearch)) return user;\r\n      return;\r\n    });\r\n  }\r\n\r\n  private resetFavorites() {\r\n    const favorites = [...this.allFavorites];\r\n    favorites.forEach((user) => {\r\n      const index = findIndexByProperty(this.favorites, 'username', user);\r\n      if (index !== -1) favorites[index] = user;\r\n    });\r\n    this.favorites = favorites;\r\n  }\r\n\r\n  onCheck(e: Event) {\r\n    const event = e as CustomEvent;\r\n    const username = event.detail.value;\r\n    const isChecked = event.detail.checked;\r\n    const userIndex = findIndexByProperty(this.users, 'username', username);\r\n    const favoriteIndex = findIndexByProperty(this.favorites, 'username', username);\r\n    if (userIndex !== -1) this.users[userIndex].checked = isChecked;\r\n    if (favoriteIndex !== -1) this.favorites[favoriteIndex].checked = isChecked;\r\n    if (isChecked) this.chips.set(username, username);\r\n    if (!isChecked) {\r\n      this.chips.delete(username);\r\n    }\r\n    this.emitValues();\r\n  }\r\n\r\n  onChipClick(username: string) {\r\n    this.chips.delete(username);\r\n    const userIndex = findIndexByProperty(this.users, 'username', username);\r\n    const favoriteIndex = findIndexByProperty(this.favorites, 'username', username);\r\n    if (userIndex !== -1) this.users[userIndex].checked = false;\r\n    if (favoriteIndex !== -1) this.favorites[favoriteIndex].checked = false;\r\n    this.emitValues();\r\n  }\r\n\r\n  ngOnInit() {}\r\n}\r\n","<ion-searchbar (ionChange)=\"onInputChange($event)\"></ion-searchbar>\r\n\r\n<ion-chip *ngFor=\"let user of chips|keyvalue\">\r\n  <ion-label>{{user.key}}</ion-label>\r\n  <ion-icon name=\"close\" (click)=\"onChipClick(user.key)\"></ion-icon>\r\n</ion-chip>\r\n\r\n<ion-accordion-group>\r\n  <!-- Favorites users -->\r\n  <ion-accordion value=\"first\">\r\n    <ion-item slot=\"header\" color=\"light\">\r\n      <ion-label>Mes favoris</ion-label>\r\n    </ion-item>\r\n    <ion-list class=\"ion-padding favorites__list\" slot=\"content\">\r\n      <ion-item *ngFor=\"let user of favorites\">\r\n        <ion-checkbox slot=\"start\" value={{user.username}} (ionChange)=\"onCheck($event)\" [checked]=\"user.checked\">\r\n        </ion-checkbox>\r\n        <ion-label>{{user.username}}</ion-label>\r\n      </ion-item>\r\n    </ion-list>\r\n  </ion-accordion>\r\n  <!-- All users -->\r\n  <ion-accordion>\r\n    <ion-item slot=\"header\" color=\"light\">\r\n      <ion-label>Tous les utilisateurs</ion-label>\r\n    </ion-item>\r\n    <div class=\"ion-padding users__content ion-content-scroll-host\" slot=\"content\">\r\n      <ion-list>\r\n        <ion-item *ngFor=\"let user of users\">\r\n          <ion-checkbox slot=\"start\" value={{user.username}} (ionChange)=\"onCheck($event)\" [checked]=\"user.checked\">\r\n          </ion-checkbox>\r\n          <ion-label>{{user.username}}</ion-label>\r\n        </ion-item>\r\n      </ion-list>\r\n      <ion-infinite-scroll (ionInfinite)=\"onIonInfinite($event)\">\r\n        <ion-infinite-scroll-content></ion-infinite-scroll-content>\r\n      </ion-infinite-scroll>\r\n    </div>\r\n  </ion-accordion>\r\n\r\n</ion-accordion-group>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}