{"ast":null,"code":"import { first, switchMap } from 'rxjs/operators';\nimport { AuthService } from './auth.service';\nimport * as i0 from \"@angular/core\";\nexport class AuthInterceptorService {\n  constructor(injector) {\n    this.injector = injector;\n  }\n  intercept(req, next) {\n    // Retrieve AuthService at runtime from the injector.\n    // (Otherwise there would be a circular dependency:\n    //  AuthInterceptorService -> AuthService -> HttpClient -> AuthInterceptorService).\n    const auth = this.injector.get(AuthService);\n    // Get the bearer token (if any).\n    return auth.getToken$().pipe(first(), switchMap(token => {\n      // Add it to the request if it doesn't already have an Authorization header.\n      if (token && !req.headers.has('Authorization')) {\n        req = req.clone({\n          headers: req.headers.set('Authorization', `Bearer ${token}`)\n        });\n      }\n      return next.handle(req);\n    }));\n  }\n}\nAuthInterceptorService.ɵfac = function AuthInterceptorService_Factory(t) {\n  return new (t || AuthInterceptorService)(i0.ɵɵinject(i0.Injector));\n};\nAuthInterceptorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthInterceptorService,\n  factory: AuthInterceptorService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAASA,KAAK,EAAEC,SAAS,QAAQ,gBAAgB;AAEjD,SAASC,WAAW,QAAQ,gBAAgB;;AAG5C,OAAM,MAAOC,sBAAsB;EACjCC,YAAoBC,QAAkB;IAAlB,aAAQ,GAARA,QAAQ;EAAa;EAEzCC,SAAS,CAACC,GAAqB,EAAEC,IAAiB;IAChD;IACA;IACA;IACA,MAAMC,IAAI,GAAG,IAAI,CAACJ,QAAQ,CAACK,GAAG,CAACR,WAAW,CAAC;IAE3C;IACA,OAAOO,IAAI,CAACE,SAAS,EAAE,CAACC,IAAI,CAC1BZ,KAAK,EAAE,EACPC,SAAS,CAAEY,KAAK,IAAI;MAClB;MACA,IAAIA,KAAK,IAAI,CAACN,GAAG,CAACO,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC,EAAE;QAC9CR,GAAG,GAAGA,GAAG,CAACS,KAAK,CAAC;UACdF,OAAO,EAAEP,GAAG,CAACO,OAAO,CAACG,GAAG,CAAC,eAAe,EAAE,UAAUJ,KAAK,EAAE;SAC5D,CAAC;;MAEJ,OAAOL,IAAI,CAACU,MAAM,CAACX,GAAG,CAAC;IACzB,CAAC,CAAC,CACH;EACH;;;mBAtBWJ,sBAAsB;AAAA;;SAAtBA,sBAAsB;EAAAgB,SAAtBhB,sBAAsB;EAAAiB,YADT;AAAM","names":["first","switchMap","AuthService","AuthInterceptorService","constructor","injector","intercept","req","next","auth","get","getToken$","pipe","token","headers","has","clone","set","handle","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\timot\\OneDrive\\Documents\\HEIG\\semestre-5\\DevMobile\\projet-shroom-share\\ShroomShare-front\\src\\app\\auth\\auth-interceptor.service.ts"],"sourcesContent":["import { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { first, switchMap } from 'rxjs/operators';\r\n\r\nimport { AuthService } from './auth.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthInterceptorService implements HttpInterceptor {\r\n  constructor(private injector: Injector) {}\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    // Retrieve AuthService at runtime from the injector.\r\n    // (Otherwise there would be a circular dependency:\r\n    //  AuthInterceptorService -> AuthService -> HttpClient -> AuthInterceptorService).\r\n    const auth = this.injector.get(AuthService);\r\n\r\n    // Get the bearer token (if any).\r\n    return auth.getToken$().pipe(\r\n      first(),\r\n      switchMap((token) => {\r\n        // Add it to the request if it doesn't already have an Authorization header.\r\n        if (token && !req.headers.has('Authorization')) {\r\n          req = req.clone({\r\n            headers: req.headers.set('Authorization', `Bearer ${token}`),\r\n          });\r\n        }\r\n        return next.handle(req);\r\n      })\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}