{"ast":null,"code":"var _AuthService_auth$;\nimport { __classPrivateFieldGet, __classPrivateFieldSet } from \"tslib\";\nimport { ReplaySubject, from, delayWhen } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@ionic/storage\";\n// const API_URL = \"https://shroom-share.onrender.com/api\";\nconst API_URL = environment.apiUrl;\n/**\r\n * Authentication service for login/logout.\r\n */\nexport class AuthService {\n  constructor(http, storage) {\n    this.http = http;\n    this.storage = storage;\n    _AuthService_auth$.set(this, void 0);\n    __classPrivateFieldSet(this, _AuthService_auth$, new ReplaySubject(1), \"f\");\n    this.storage.get('auth').then(auth => {\n      // Emit the loaded value into the observable stream.\n      __classPrivateFieldGet(this, _AuthService_auth$, \"f\").next(auth);\n    });\n  }\n  isAuthenticated$() {\n    return __classPrivateFieldGet(this, _AuthService_auth$, \"f\").pipe(map(auth => Boolean(auth)));\n  }\n  getUser$() {\n    return __classPrivateFieldGet(this, _AuthService_auth$, \"f\").pipe(map(auth => auth === null || auth === void 0 ? void 0 : auth.user));\n  }\n  getToken$() {\n    return __classPrivateFieldGet(this, _AuthService_auth$, \"f\").pipe(map(auth => auth === null || auth === void 0 ? void 0 : auth.token));\n  }\n  logIn$(authRequest) {\n    const authUrl = `${API_URL}/auth`;\n    console.log({\n      authUrl,\n      authRequest\n    });\n    return this.http.post(authUrl, authRequest).pipe(delayWhen(auth => this.saveAuth$(auth)), map(auth => {\n      __classPrivateFieldGet(this, _AuthService_auth$, \"f\").next(auth);\n      console.log(`User ${auth.user.username} logged in`);\n      return auth.user;\n    }));\n  }\n  saveAuth$(auth) {\n    return from(this.storage.set('auth', auth));\n  }\n  logOut() {\n    __classPrivateFieldGet(this, _AuthService_auth$, \"f\").next(undefined);\n    this.storage.remove('auth');\n    console.log('User logged out');\n  }\n}\n_AuthService_auth$ = new WeakMap();\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Storage));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAEA,SAASA,aAAa,EAAcC,IAAI,EAAEC,SAAS,QAAQ,MAAM;AACjE,SAASC,GAAG,QAAQ,gBAAgB;AAIpC,SAASC,WAAW,QAAQ,8BAA8B;;;;AAE1D;AACA,MAAMC,OAAO,GAAGD,WAAW,CAACE,MAAM;AAElC;;;AAMA,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB,EAAUC,OAAgB;IAA1C,SAAI,GAAJD,IAAI;IAAsB,YAAO,GAAPC,OAAO;IAFrDC;IAGEC,2BAAI,sBAAU,IAAIZ,aAAa,CAAC,CAAC,CAAC;IAClC,IAAI,CAACU,OAAO,CAACG,GAAG,CAAC,MAAM,CAAC,CAACC,IAAI,CAAEC,IAAI,IAAI;MACrC;MACAC,2BAAI,0BAAO,CAACC,IAAI,CAACF,IAAI,CAAC;IACxB,CAAC,CAAC;EACJ;EAEAG,gBAAgB;IACd,OAAOF,2BAAI,0BAAO,CAACG,IAAI,CAAChB,GAAG,CAAEY,IAAI,IAAKK,OAAO,CAACL,IAAI,CAAC,CAAC,CAAC;EACvD;EAEAM,QAAQ;IACN,OAAOL,2BAAI,0BAAO,CAACG,IAAI,CAAChB,GAAG,CAAEY,IAAI,IAAKA,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEO,IAAI,CAAC,CAAC;EACpD;EAEAC,SAAS;IACP,OAAOP,2BAAI,0BAAO,CAACG,IAAI,CAAChB,GAAG,CAAEY,IAAI,IAAKA,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAES,KAAK,CAAC,CAAC;EACrD;EAEAC,MAAM,CAACC,WAAwB;IAC7B,MAAMC,OAAO,GAAG,GAAGtB,OAAO,OAAO;IACjCuB,OAAO,CAACC,GAAG,CAAC;MAAEF,OAAO;MAAED;IAAW,CAAE,CAAC;IACrC,OAAO,IAAI,CAACjB,IAAI,CAACqB,IAAI,CAAeH,OAAO,EAAED,WAAW,CAAC,CAACP,IAAI,CAC5DjB,SAAS,CAAEa,IAAkB,IAAK,IAAI,CAACgB,SAAS,CAAChB,IAAI,CAAC,CAAC,EACvDZ,GAAG,CAAEY,IAAI,IAAI;MACXC,2BAAI,0BAAO,CAACC,IAAI,CAACF,IAAI,CAAC;MACtBa,OAAO,CAACC,GAAG,CAAC,QAAQd,IAAI,CAACO,IAAI,CAACU,QAAQ,YAAY,CAAC;MACnD,OAAOjB,IAAI,CAACO,IAAI;IAClB,CAAC,CAAC,CACH;EACH;EAEQS,SAAS,CAAChB,IAAkB;IAClC,OAAOd,IAAI,CAAC,IAAI,CAACS,OAAO,CAACuB,GAAG,CAAC,MAAM,EAAElB,IAAI,CAAC,CAAC;EAC7C;EAEAmB,MAAM;IACJlB,2BAAI,0BAAO,CAACC,IAAI,CAACkB,SAAS,CAAC;IAC3B,IAAI,CAACzB,OAAO,CAAC0B,MAAM,CAAC,MAAM,CAAC;IAC3BR,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;EAChC;;;;mBA5CWtB,WAAW;AAAA;;SAAXA,WAAW;EAAA8B,SAAX9B,WAAW;EAAA+B,YAFV;AAAM","names":["ReplaySubject","from","delayWhen","map","environment","API_URL","apiUrl","AuthService","constructor","http","storage","_AuthService_auth$","__classPrivateFieldSet","get","then","auth","__classPrivateFieldGet","next","isAuthenticated$","pipe","Boolean","getUser$","user","getToken$","token","logIn$","authRequest","authUrl","console","log","post","saveAuth$","username","set","logOut","undefined","remove","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\timot\\OneDrive\\Documents\\HEIG\\semestre-5\\DevMobile\\projet-shroom-share\\ShroomShare-front\\src\\app\\auth\\auth.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { ReplaySubject, Observable, from, delayWhen } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { Storage } from '@ionic/storage';\r\nimport { AuthResponse, AuthRequest } from '../models/auth';\r\nimport { User } from '../models/users';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n// const API_URL = \"https://shroom-share.onrender.com/api\";\r\nconst API_URL = environment.apiUrl;\r\n\r\n/**\r\n * Authentication service for login/logout.\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n}) //eslint-disable-line\r\nexport class AuthService {\r\n  #auth$: ReplaySubject<AuthResponse | undefined>;\r\n\r\n  constructor(private http: HttpClient, private storage: Storage) {\r\n    this.#auth$ = new ReplaySubject(1);\r\n    this.storage.get('auth').then((auth) => {\r\n      // Emit the loaded value into the observable stream.\r\n      this.#auth$.next(auth);\r\n    });\r\n  }\r\n\r\n  isAuthenticated$(): Observable<boolean> {\r\n    return this.#auth$.pipe(map((auth) => Boolean(auth)));\r\n  }\r\n\r\n  getUser$(): Observable<User | undefined> {\r\n    return this.#auth$.pipe(map((auth) => auth?.user));\r\n  }\r\n\r\n  getToken$(): Observable<string | undefined> {\r\n    return this.#auth$.pipe(map((auth) => auth?.token));\r\n  }\r\n\r\n  logIn$(authRequest: AuthRequest): Observable<User> {\r\n    const authUrl = `${API_URL}/auth`;\r\n    console.log({ authUrl, authRequest });\r\n    return this.http.post<AuthResponse>(authUrl, authRequest).pipe(\r\n      delayWhen((auth: AuthResponse) => this.saveAuth$(auth)),\r\n      map((auth) => {\r\n        this.#auth$.next(auth);\r\n        console.log(`User ${auth.user.username} logged in`);\r\n        return auth.user;\r\n      })\r\n    );\r\n  }\r\n\r\n  private saveAuth$(auth: AuthResponse): Observable<void> {\r\n    return from(this.storage.set('auth', auth));\r\n  }\r\n\r\n  logOut(): void {\r\n    this.#auth$.next(undefined);\r\n    this.storage.remove('auth');\r\n    console.log('User logged out');\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}