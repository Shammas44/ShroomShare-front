{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./shroom-share-api.service\";\nimport * as i2 from \"@ionic/storage\";\nexport class SpeciesProviderService {\n  constructor(api, storage) {\n    this.api = api;\n    this.storage = storage;\n    this.species = [];\n    this.api = api;\n  }\n  doIfNewSpeciesAreAvailable(callback) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const species = yield this.storage.get('species');\n      const speciesTotal = (_a = species === null || species === void 0 ? void 0 : species.length) !== null && _a !== void 0 ? _a : 0;\n      this.api.countSpecies$().subscribe({\n        next: res => {\n          console.log({\n            coutn: res.count,\n            speciesTotal\n          });\n          if (res.count !== speciesTotal) callback();\n        },\n        error: error => {\n          console.log(error);\n        }\n      });\n    });\n  }\n  storeSpecies() {\n    let lastPage = 1;\n    let currentPage = 1;\n    const option = {\n      pageSize: 100,\n      currentPage: 1,\n      showPictures: true\n    };\n    // TODO: impossible to execute async code into a dowhile\n    do {\n      this.api.getSpecies$(option).subscribe({\n        next: res => {\n          option.currentPage = res.currentPage + 1;\n          currentPage = res.currentPage + 1;\n          lastPage = res.lastPage;\n          for (const specy of res.species) {\n            this.species.push(specy);\n          }\n          this.storage.set('species', this.species);\n          console.log(this.storage.get('species'), 'species');\n        },\n        error: err => {\n          console.log({\n            err\n          });\n        }\n      });\n    } while (currentPage < lastPage);\n  }\n}\nSpeciesProviderService.ɵfac = function SpeciesProviderService_Factory(t) {\n  return new (t || SpeciesProviderService)(i0.ɵɵinject(i1.ShroomShareApiService), i0.ɵɵinject(i2.Storage));\n};\nSpeciesProviderService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SpeciesProviderService,\n  factory: SpeciesProviderService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;;AAQA,OAAM,MAAOA,sBAAsB;EAEjCC,YAAoBC,GAA0B,EAAUC,OAAgB;IAApD,QAAG,GAAHD,GAAG;IAAiC,YAAO,GAAPC,OAAO;IAD/D,YAAO,GAAY,EAAE;IAEnB,IAAI,CAACD,GAAG,GAAGA,GAAG;EAChB;EAEME,0BAA0B,CAACC,QAAkB;;;MACjD,MAAMC,OAAO,GAAG,MAAM,IAAI,CAACH,OAAO,CAACI,GAAG,CAAC,SAAS,CAAC;MACjD,MAAMC,YAAY,GAAG,aAAO,aAAPF,OAAO,uBAAPA,OAAO,CAAEG,MAAM,mCAAI,CAAC;MACzC,IAAI,CAACP,GAAG,CAACQ,aAAa,EAAE,CAACC,SAAS,CAAC;QACjCC,IAAI,EAAGC,GAAG,IAAI;UACZC,OAAO,CAACC,GAAG,CAAC;YAAEC,KAAK,EAAEH,GAAG,CAACI,KAAK;YAAET;UAAY,CAAE,CAAC;UAC/C,IAAIK,GAAG,CAACI,KAAK,KAAKT,YAAY,EAAEH,QAAQ,EAAE;QAC5C,CAAC;QACDa,KAAK,EAAGA,KAAK,IAAI;UACfJ,OAAO,CAACC,GAAG,CAACG,KAAK,CAAC;QACpB;OACD,CAAC;;;EAGJC,YAAY;IACV,IAAIC,QAAQ,GAAG,CAAC;IAChB,IAAIC,WAAW,GAAG,CAAC;IACnB,MAAMC,MAAM,GAAG;MACbC,QAAQ,EAAE,GAAG;MACbF,WAAW,EAAE,CAAC;MACdG,YAAY,EAAE;KACf;IAED;IAEA,GAAG;MACD,IAAI,CAACtB,GAAG,CAACuB,WAAW,CAACH,MAAM,CAAC,CAACX,SAAS,CAAC;QACrCC,IAAI,EAAGC,GAAG,IAAI;UACZS,MAAM,CAACD,WAAW,GAAGR,GAAG,CAACQ,WAAW,GAAG,CAAC;UACxCA,WAAW,GAAGR,GAAG,CAACQ,WAAW,GAAG,CAAC;UACjCD,QAAQ,GAAGP,GAAG,CAACO,QAAQ;UACvB,KAAK,MAAMM,KAAK,IAAIb,GAAG,CAACP,OAAO,EAAE;YAC/B,IAAI,CAACA,OAAO,CAACqB,IAAI,CAACD,KAAK,CAAC;;UAE1B,IAAI,CAACvB,OAAO,CAACyB,GAAG,CAAC,SAAS,EAAE,IAAI,CAACtB,OAAO,CAAC;UACzCQ,OAAO,CAACC,GAAG,CAAC,IAAI,CAACZ,OAAO,CAACI,GAAG,CAAC,SAAS,CAAC,EAAE,SAAS,CAAC;QACrD,CAAC;QACDW,KAAK,EAAGW,GAAG,IAAI;UACbf,OAAO,CAACC,GAAG,CAAC;YAAEc;UAAG,CAAE,CAAC;QACtB;OACD,CAAC;KACH,QAAQR,WAAW,GAAGD,QAAQ;EACjC;;;mBAhDWpB,sBAAsB;AAAA;;SAAtBA,sBAAsB;EAAA8B,SAAtB9B,sBAAsB;EAAA+B,YAFrB;AAAM","names":["SpeciesProviderService","constructor","api","storage","doIfNewSpeciesAreAvailable","callback","species","get","speciesTotal","length","countSpecies$","subscribe","next","res","console","log","coutn","count","error","storeSpecies","lastPage","currentPage","option","pageSize","showPictures","getSpecies$","specy","push","set","err","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\timot\\OneDrive\\Documents\\HEIG\\semestre-5\\DevMobile\\projet-shroom-share\\ShroomShare-front\\src\\app\\utils\\species-provider.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { ShroomShareApiService } from './shroom-share-api.service';\r\nimport { Specy } from '../models/species';\r\nimport { Storage } from '@ionic/storage';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n}) //eslint-disable-line\r\nexport class SpeciesProviderService {\r\n  species: Specy[] = [];\r\n  constructor(private api: ShroomShareApiService, private storage: Storage) {\r\n    this.api = api;\r\n  }\r\n\r\n  async doIfNewSpeciesAreAvailable(callback: Function) {\r\n    const species = await this.storage.get('species');\r\n    const speciesTotal = species?.length ?? 0;\r\n    this.api.countSpecies$().subscribe({\r\n      next: (res) => {\r\n        console.log({ coutn: res.count, speciesTotal });\r\n        if (res.count !== speciesTotal) callback();\r\n      },\r\n      error: (error) => {\r\n        console.log(error);\r\n      },\r\n    });\r\n  }\r\n\r\n  storeSpecies() {\r\n    let lastPage = 1;\r\n    let currentPage = 1;\r\n    const option = {\r\n      pageSize: 100,\r\n      currentPage: 1,\r\n      showPictures: true,\r\n    };\r\n\r\n    // TODO: impossible to execute async code into a dowhile\r\n\r\n    do {\r\n      this.api.getSpecies$(option).subscribe({\r\n        next: (res) => {\r\n          option.currentPage = res.currentPage + 1;\r\n          currentPage = res.currentPage + 1;\r\n          lastPage = res.lastPage;\r\n          for (const specy of res.species) {\r\n            this.species.push(specy);\r\n          }\r\n          this.storage.set('species', this.species);\r\n          console.log(this.storage.get('species'), 'species');\r\n        },\r\n        error: (err) => {\r\n          console.log({ err });\r\n        },\r\n      });\r\n    } while (currentPage < lastPage);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}